- name: Create ACI Services Schema
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - schema.yml
  vars:
    apic_host: sandboxapicdc.cisco.com
    username: admin
    password: '!v3G@!4@Y'
    validate_certs: no

  tasks:
    - name: Create tenants
      cisco.aci.aci_tenant:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item }}"
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | map(attribute='tenant') | unique }}"

    - name: Create VRFs
      cisco.aci.aci_vrf:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.tenant }}"
        vrf: "{{ item.vrf }}"
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | unique(attribute='vrf') }}"
      loop_control:
        label: "{{ item.vrf }}/{{ item.tenant }}"

    - name: Create bridge domains
      cisco.aci.aci_bd:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.0.tenant }}"
        bd: "{{ item.1.name }}"
        vrf: "{{ item.0.vrf }}"
        arp_flooding: false
        enable_routing: true
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | subelements('bridge_domain') }}"
      loop_control:
        label: "{{ item.0.tenant }}/{{ item.1.name }}"

    - name: Flatten bridge domain + subnet list
      set_fact:
        bd_subnet_map: "{{ _bd_subnet_map | from_yaml }}"
      vars:
        _bd_subnet_map: |-
          {% for svc in aci_services %}
          {% for bd in svc.bridge_domain %}
          {% for subnet in bd.subnets %}
          - { tenant: {{ svc.tenant | to_json }}, bd: {{ bd.name | to_json }}, gateway: {{ subnet.gateway | to_json }}, mask: {{ subnet.mask | to_json }} }
          {% endfor %}
          {% endfor %}
          {% endfor %}

    - name: Add subnets to bridge domains
      cisco.aci.aci_bd_subnet:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.tenant }}"
        bd: "{{ item.bd }}"
        gateway: "{{ item.gateway }}"
        mask: "{{ item.mask }}"
        scope: "private"
        state: present
      delegate_to: localhost
      loop: "{{ bd_subnet_map }}"
      loop_control:
        label: "{{ item.tenant }}/{{ item.bd }}/{{ item.gateway }}/{{ item.mask }}"

    - name: Create unique application profiles for each tenant
      cisco.aci.aci_ap:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.tenant }}"
        app_profile: "{{ item.app_group }}"
        description: "Application Profile for {{ item.name }}"
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | unique(attribute='app_group') }}"
      loop_control:
        label: "{{ item.tenant }}/{{ item.app_group }}"

    - name: Create endpoint groups
      cisco.aci.aci_epg:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.0.tenant }}"
        ap: "{{ item.0.app_group }}"
        epg: "{{ item.1.name }}"
        bd: "{{ item.0.bridge_domain[0].name }}"
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | subelements('endpoint_group') }}"
      loop_control:
        label: "{{ item.0.tenant }}/{{ item.0.app_group }}/{{ item.1.name }}"

    - name: Create endpoint security groups
      cisco.aci.aci_esg:
        host: "{{ apic_host }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ validate_certs }}"
        tenant: "{{ item.0.tenant }}"
        ap: "{{ item.0.app_group }}"
        esg: "{{ item.1.name }}"
        vrf: "{{ item.0.vrf }}"
        state: present
      delegate_to: localhost
      loop: "{{ aci_services | subelements('security_group') }}"
      loop_control:
        label: "{{ item.0.tenant }}/{{ item.0.app_group }}/{{ item.1.name }}"
